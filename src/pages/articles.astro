<!-- ---
import { ApolloClient, InMemoryCache, gql } from "@apollo/client";
import "../styles/articles.css";

const client = new ApolloClient({
  uri: `${import.meta.env.STRAPI_API_URL}/graphql`,
  cache: new InMemoryCache(),
  defaultOptions: {
    query: {
      fetchPolicy: "network-only",
      errorPolicy: "all",
    },
  },
});

export const prerender = false;
const currentPath = Astro.url.pathname;
const page = parseInt(Astro.url.searchParams.get("page") || "1");
const pageSize = 10;

const { data } = await client.query({
  query: gql`
    query Articles($page: Int!, $pageSize: Int!) {
      articles(pagination: { page: $page, pageSize: $pageSize }) {
        data {
          id
          attributes {
            title
            content
          }
        }
        meta {
          pagination {
            page
            pageSize
            pageCount
            total
          }
        }
      }
    }
  `,
  variables: { page, pageSize },
});

const { data: articles, meta } = data.articles;
---

<div class="articles-container">
  <h1>Latest Articles</h1>

  <div class="articles-grid">
    {
      articles.map((article) => (
        <article class="article">
          <h2>{article.attributes.title}</h2>
          <div class="article-content" set:html={article.attributes.content} />
        </article>
      ))
    }
  </div>

  <nav class="pagination">
    <a
      href={`${currentPath}?page=${meta.pagination.page - 1}`}
      class={`pagination-button ${page <= 1 ? "disabled" : ""}`}
      aria-label="Go to previous page"
      rel={page > 1 ? "prev" : null}
    >
      Previous
    </a>
    <span class="pagination-info">
      Page {page} of {meta.pagination.pageCount}
    </span>
    <a
      href={`${currentPath}?page=${meta.pagination.page + 1}`}
      class={`pagination-button ${page >= meta.pagination.pageCount ? "disabled" : ""}`}
      aria-label="Go to next page"
      rel={page < meta.pagination.pageCount ? "next" : null}
    >
      Next
    </a>
  </nav>
</div> -->